import{d as C,r as u,o as P,b as n,c as h,l as w,w as t,g as e,f as E,u as U,h as o,e as q,s as W,F as N,z as A,t as V,q as B,p as $,k as j,_ as L}from"./index-53daf855.js";import{j as k,o as D,T as z,E as O}from"./editor-ac9e23a5.js";const T={id:""},H=E("p",{id:"jsEditor"},null,-1),y=C({__name:"docEditor",props:["code"],setup(r){const i=r,p=u(""),b=[k(),D];return P(async()=>{p.value=i.code}),(s,d)=>{const c=n("v-col"),_=n("v-row"),a=n("v-card");return h(),w(a,{"elevation-6":""},{default:t(()=>[e(_,{class:"ma-5 text-center align-center"},{default:t(()=>[e(c,{cols:"12"},{default:t(()=>[E("div",T,[e(U(z),{disabled:"",modelValue:p.value,"onUpdate:modelValue":d[0]||(d[0]=l=>p.value=l),placeholder:"Code goes here...",style:{height:"200px",textAlign:"left"},autofocus:!0,"indent-with-tab":!0,"tab-size":2,extensions:b},null,8,["modelValue"]),H])]),_:1})]),_:1})]),_:1})}}}),ae=C({__name:"variable",setup(r){const i=u(`let zero = 0;
let negatif = -5;
let positif = 45;`),p=u(`let floatExemple1 = 3.14;
let floatExemple2 = -0.5; 
let floatExemple3 = 2.0;`),b=u("let pi = 3.141592653589793;"),s=u(`let exemple1 = 'Bonjour';
let nombreEnString = '123';`),d=u(`let charactere = 'a';
let charactere2 = '9';
let charactere3 = '!';`);return(c,_)=>{const a=n("v-card-title"),l=n("v-card-subtitle"),f=n("v-card-text"),v=n("v-card"),m=n("v-col"),g=n("v-row");return h(),w(g,null,{default:t(()=>[e(m,{cols:"12"},{default:t(()=>[e(v,null,{default:t(()=>[e(a,{class:"headline"},{default:t(()=>[o("int")]),_:1}),e(l,null,{default:t(()=>[o("Entier")]),_:1}),e(f,null,{default:t(()=>[o(` Un "int" est un type de données qui représente les nombres entiers, c'est-à-dire des nombres sans partie décimale. Ils peuvent être positifs, négatifs ou nuls. Par exemple, 0, -1, 42 sont tous des entiers. `)]),_:1}),e(y,{code:i.value},null,8,["code"])]),_:1})]),_:1}),e(m,{cols:"12"},{default:t(()=>[e(v,null,{default:t(()=>[e(a,{class:"headline"},{default:t(()=>[o("float")]),_:1}),e(l,null,{default:t(()=>[o("Nombre à virgule flottante - Précision simple")]),_:1}),e(f,null,{default:t(()=>[o(` Le type de données "float" est utilisé pour représenter des nombres à virgule flottante avec une précision simple. Cela signifie qu'ils peuvent contenir des chiffres après la virgule, mais la précision est limitée. Par exemple, 3.14, -0.5, 2.0 sont des nombres à virgule flottante. `)]),_:1}),e(y,{code:p.value},null,8,["code"])]),_:1})]),_:1}),e(m,{cols:"12"},{default:t(()=>[e(v,null,{default:t(()=>[e(a,{class:"headline"},{default:t(()=>[o("double")]),_:1}),e(l,null,{default:t(()=>[o("Nombre à virgule flottante - Double précision")]),_:1}),e(f,null,{default:t(()=>[o(` Le type "double" est similaire à "float", mais il offre une précision double. Cela signifie qu'il peut stocker des nombres à virgule flottante avec une plus grande précision, mais il utilise plus de mémoire. En général, "double" est souvent utilisé lorsque la précision est critique. `)]),_:1}),e(y,{code:b.value},null,8,["code"])]),_:1})]),_:1}),e(m,{cols:"12"},{default:t(()=>[e(v,null,{default:t(()=>[e(a,{class:"headline"},{default:t(()=>[o("string")]),_:1}),e(l,null,{default:t(()=>[o("Chaîne de caractères")]),_:1}),e(f,null,{default:t(()=>[o(' Le type "string" est utilisé pour représenter des séquences de caractères. Une chaîne est simplement un ensemble de caractères, comme du texte. Par exemple, "Bonjour", "123", et "Ceci est une chaîne" sont des exemples de chaînes de caractères. ')]),_:1}),e(y,{code:s.value},null,8,["code"])]),_:1})]),_:1}),e(m,{cols:"12"},{default:t(()=>[e(v,null,{default:t(()=>[e(a,{class:"headline"},{default:t(()=>[o("char")]),_:1}),e(l,null,{default:t(()=>[o("Caractère")]),_:1}),e(f,null,{default:t(()=>[o(` Le type "char" représente un seul caractère. Il est utilisé pour stocker des caractères individuels, tels que 'a', '9', ou '!'. Contrairement aux chaînes de caractères, qui sont des séquences de caractères, "char" ne peut contenir qu'un seul caractère. `)]),_:1}),e(y,{code:d.value},null,8,["code"])]),_:1})]),_:1})]),_:1})}}}),S=r=>($("data-v-aa9f8a1b"),r=r(),j(),r),M=S(()=>E("h3",null,"Editeur",-1)),R={id:""},J=S(()=>E("p",{id:"jsEditor"},null,-1)),G=S(()=>E("h3",null,"Console",-1)),K=C({__name:"docPlayWithConsole",props:["code"],setup(r){const i=r,p=u(""),b=[k(),D],s=u(new O);P(async()=>{p.value=i.code,await d()});async function d(){s.value.run(p.value).then(function(c){c.forEach(_=>{s.value.addOutput(_)})}).catch(function(c){s.value.addOutput(c,"err")})}return(c,_)=>{const a=n("v-col"),l=n("v-icon"),f=n("v-list-item-content"),v=n("v-list-item"),m=n("v-list"),g=n("v-card"),I=n("v-row");return h(),w(I,{class:"ma-5 text-center align-center"},{default:t(()=>[e(a,{cols:"6",class:"v-col-md-12"},{default:t(()=>[M,E("div",R,[e(U(z),{disabled:"",modelValue:p.value,"onUpdate:modelValue":_[0]||(_[0]=x=>p.value=x),placeholder:"Code goes here...",style:{height:"300px",textAlign:"left"},autofocus:!0,"indent-with-tab":!0,"tab-size":2,extensions:b},null,8,["modelValue"]),J])]),_:1}),e(a,{cols:"6",color:"grey-lighten-4",class:"v-col-md-12"},{default:t(()=>[G,e(g,{height:"300px",elevation:"2",color:"grey-lighten-2"},{default:t(()=>[e(m,{dense:"",class:"console bg-grey-lighten-2"},{default:t(()=>[(h(!0),q(N,null,W(s.value.lines.reverse(),x=>(h(),w(v,{class:"bg-grey-lighten-2"},{default:t(()=>[e(f,null,{default:t(()=>[x.type=="err"?(h(),q("p",{key:0,class:A([x.type,"text-left"])},[o(" > "),e(l,null,{default:t(()=>[o("mdi-close-circle")]),_:1}),o(" "+V(x.message),1)],2)):B("",!0),x.type=="log"?(h(),q("p",{key:1,class:A([x.type,"text-left"])}," > "+V(x.message),3)):B("",!0)]),_:2},1024)]),_:2},1024))),256))]),_:1})]),_:1})]),_:1})]),_:1})}}});const F=L(K,[["__scopeId","data-v-aa9f8a1b"]]),Q=r=>($("data-v-941920cc"),r=r(),j(),r),X=Q(()=>E("h2",null,"Exemple de fonctions natives",-1)),Y=C({__name:"fonction",setup(r){const i=u(`// Définition d'une fonction sans paramètre
function maFonction() {
  console.log('Bonjour, je suis une fonction !');
}

// Appel de la fonction
maFonction();

// Définition d'une fonction avec des paramètres
function addition(a, b) {
  return a + b;
}

// Appel de la fonction avec des arguments
let resultat = addition(3, 5);
console.log(resultat); // Affichera 8 dans la console`),p=u('let num = parseInt("42"); // num contient maintenant la valeur 42'),b=u('let num = parseFloat("3.14"); // num contient maintenant la valeur 3.14'),s=u(`let pi = 3.141592653589793;
let piFormatted = pi.toFixed(2); // piFormatted contient maintenant "3.14"`),d=u(`let str = "Hello, World!";
let strUpper = str.toUpperCase(); // strUpper contient maintenant "HELLO, WORLD!"`),c=u(`let str = "Hello, World!";
let subStr = str.substring(0, 5); // subStr contient maintenant "Hello"`);return(_,a)=>{const l=n("v-card-title"),f=n("v-card-subtitle"),v=n("v-card-text"),m=n("v-card"),g=n("v-col"),I=n("v-divider"),x=n("v-row");return h(),w(x,null,{default:t(()=>[e(g,{cols:"12"},{default:t(()=>[e(m,null,{default:t(()=>[e(l,{class:"headline"},{default:t(()=>[o("Une fonction")]),_:1}),e(f,null,{default:t(()=>[o("Pour crée une fonction")]),_:1}),e(v,null,{default:t(()=>[o(" Pour créer une fonction en JavaScript, vous utilisez le mot-clé function, suivi du nom de la fonction, d'une paire de parenthèses (qui peuvent contenir des paramètres) et d'un bloc de code entre des accolades {}. Voici un exemple simple de création de fonction : "),e(F,{code:i.value},null,8,["code"])]),_:1})]),_:1})]),_:1}),e(g,{cols:"12"},{default:t(()=>[e(I,{class:"border-opacity-100 mb-3"}),X]),_:1}),e(g,{cols:"12"},{default:t(()=>[e(m,null,{default:t(()=>[e(l,{class:"headline"},{default:t(()=>[o("parseInt")]),_:1}),e(f,null,{default:t(()=>[o("Convertit une chaîne en un entier.")]),_:1}),e(v,null,{default:t(()=>[e(y,{code:p.value},null,8,["code"])]),_:1})]),_:1})]),_:1}),e(g,{cols:"12"},{default:t(()=>[e(m,null,{default:t(()=>[e(l,{class:"headline"},{default:t(()=>[o("parseFloat")]),_:1}),e(f,null,{default:t(()=>[o("Convertit une chaîne en un nombre à virgule flottante.")]),_:1}),e(v,null,{default:t(()=>[e(y,{code:b.value},null,8,["code"])]),_:1})]),_:1})]),_:1}),e(g,{cols:"12"},{default:t(()=>[e(m,null,{default:t(()=>[e(l,{class:"headline"},{default:t(()=>[o("toFixed")]),_:1}),e(f,null,{default:t(()=>[o("Formate un nombre avec un nombre fixe de chiffres après la virgule.")]),_:1}),e(v,null,{default:t(()=>[e(y,{code:s.value},null,8,["code"])]),_:1})]),_:1})]),_:1}),e(g,{cols:"12"},{default:t(()=>[e(m,null,{default:t(()=>[e(l,{class:"headline"},{default:t(()=>[o("toUpperCase")]),_:1}),e(f,null,{default:t(()=>[o("Convertit une chaîne en majuscules.")]),_:1}),e(v,null,{default:t(()=>[e(y,{code:d.value},null,8,["code"])]),_:1})]),_:1})]),_:1}),e(g,{cols:"12"},{default:t(()=>[e(m,null,{default:t(()=>[e(l,{class:"headline"},{default:t(()=>[o("substring")]),_:1}),e(f,null,{default:t(()=>[o("Récupère une partie d'une chaîne en fonction des indices fournis.")]),_:1}),e(v,null,{default:t(()=>[e(y,{code:c.value},null,8,["code"])]),_:1})]),_:1})]),_:1})]),_:1})}}});const se=L(Y,[["__scopeId","data-v-941920cc"]]),Z=C({__name:"for",setup(r){const i=u(`// Boucle for
for (let i = 0; i <= 5; i++) {
  console.log(i);
}`);return(p,b)=>{const s=n("v-card-title"),d=n("v-card-subtitle"),c=n("v-card-text"),_=n("v-card"),a=n("v-col"),l=n("v-row");return h(),w(l,null,{default:t(()=>[e(a,{cols:"12"},{default:t(()=>[e(_,null,{default:t(()=>[e(s,{class:"headline"},{default:t(()=>[o("Boucle for")]),_:1}),e(d,null,{default:t(()=>[o("Structure de contrôle de boucle.")]),_:1}),e(c,null,{default:t(()=>[o(" La boucle for est une structure de contrôle utilisée pour répéter une partie du code un certain nombre de fois. Elle est généralement utilisée lorsque le nombre d'itérations est connu à l'avance. ")]),_:1}),e(c,null,{default:t(()=>[e(F,{code:i.value},null,8,["code"])]),_:1})]),_:1})]),_:1})]),_:1})}}});const ue=L(Z,[["__scopeId","data-v-61c43896"]]),ee=C({__name:"whileLoop",setup(r){const i=u(`// Boucle while
let i = 1;
while (i <= 5) {
  console.log(i);
  i++;
}`);return(p,b)=>{const s=n("v-card-title"),d=n("v-card-subtitle"),c=n("v-card-text"),_=n("v-card"),a=n("v-col"),l=n("v-row");return h(),w(l,null,{default:t(()=>[e(a,{cols:"12"},{default:t(()=>[e(_,null,{default:t(()=>[e(s,{class:"headline"},{default:t(()=>[o("Boucle while")]),_:1}),e(d,null,{default:t(()=>[o("Structure de contrôle de boucle basée sur une condition.")]),_:1}),e(c,null,{default:t(()=>[o(" La boucle while est une structure de contrôle utilisée pour répéter une partie du code tant qu'une condition spécifiée est vraie. Elle est généralement utilisée lorsque le nombre d'itérations n'est pas connu à l'avance. ")]),_:1}),e(c,null,{default:t(()=>[e(F,{code:i.value},null,8,["code"])]),_:1})]),_:1})]),_:1})]),_:1})}}});const re=L(ee,[["__scopeId","data-v-7f662580"]]),te=C({__name:"foreachLoop",setup(r){const i=u(`// Utilisation de forEach
const noms = ['Samuel', 'Tom', 'Issam', 'Olivier', 'Alain'];
noms.forEach((nom) => {
  console.log(nom);
});`);return(p,b)=>{const s=n("v-card-title"),d=n("v-card-subtitle"),c=n("v-card-text"),_=n("v-card"),a=n("v-col"),l=n("v-row");return h(),w(l,null,{default:t(()=>[e(a,{cols:"12"},{default:t(()=>[e(_,null,{default:t(()=>[e(s,{class:"headline"},{default:t(()=>[o("forEach ")]),_:1}),e(d,null,{default:t(()=>[o("Méthode de parcours des éléments d'un tableau.")]),_:1}),e(c,null,{default:t(()=>[o(" La méthode forEach() est utilisée pour exécuter une fonction donnée une fois pour chaque élément du tableau. C'est une alternative plus moderne à la boucle for traditionnelle, particulièrement utile pour travailler avec des tableaux. ")]),_:1}),e(c,null,{default:t(()=>[e(F,{code:i.value},null,8,["code"])]),_:1})]),_:1})]),_:1})]),_:1})}}});const de=L(te,[["__scopeId","data-v-6ddd856d"]]),ne=C({__name:"array",setup(r){const i=u(`// Déclaration d'un tableau
let fruits = ['Pomme', 'Banane', 'Orange'];

// Accéder à un élément du tableau
let premiereFruit = fruits[0];
console.log('Le premier élément est: ' + premiereFruit)

// Modifier un élément du tableau
fruits[1] = 'Fraise';

// Ajouter un élément à la fin du tableau
fruits.push('Raisin');
console.log(fruits)

// Longueur du tableau
let longueur = fruits.length;
console.log('La longeur du tableau est de: '+ longueur)
`);return(p,b)=>{const s=n("v-card-title"),d=n("v-card-subtitle"),c=n("v-card-text"),_=n("v-card"),a=n("v-col"),l=n("v-row");return h(),w(l,null,{default:t(()=>[e(a,{cols:"12"},{default:t(()=>[e(_,null,{default:t(()=>[e(s,{class:"headline"},{default:t(()=>[o("Array (Tableau)")]),_:1}),e(d,null,{default:t(()=>[o("Collection ordonnée d'éléments.")]),_:1}),e(c,null,{default:t(()=>[o(" Un tableau (Array) en JavaScript est une collection ordonnée d'éléments pouvant être de n'importe quel type. Les tableaux sont souvent utilisés pour stocker et manipuler des ensembles de données. ")]),_:1}),e(c,null,{default:t(()=>[e(F,{code:i.value},null,8,["code"])]),_:1})]),_:1})]),_:1})]),_:1})}}});const _e=L(ne,[["__scopeId","data-v-9cd1dc86"]]),oe=C({__name:"ifElse",setup(r){const i=u(`// Exemple de structure if-else
let nombre = 10;
if (nombre > 0) {
  console.log('Le nombre est positif');
} else if (nombre < 0) {
  console.log('Le nombre est négatif');
} else {
  console.log('Le nombre est zéro');
}`);return(p,b)=>{const s=n("v-card-title"),d=n("v-card-subtitle"),c=n("v-card-text"),_=n("v-card"),a=n("v-col"),l=n("v-row");return h(),w(l,null,{default:t(()=>[e(a,{cols:"12"},{default:t(()=>[e(_,null,{default:t(()=>[e(s,{class:"headline"},{default:t(()=>[o("Condition if-else")]),_:1}),e(d,null,{default:t(()=>[o("Structure de contrôle conditionnelle.")]),_:1}),e(c,null,{default:t(()=>[o(" Les structures conditionnelles, comme le `if`, `else`, et `else if`, permettent d'exécuter des blocs de code en fonction de conditions spécifiées. ")]),_:1}),e(c,null,{default:t(()=>[e(F,{code:i.value},null,8,["code"])]),_:1})]),_:1})]),_:1})]),_:1})}}});const ie=L(oe,[["__scopeId","data-v-6a6ad6e1"]]);export{_e as A,se as F,ae as _,ue as a,de as f,ie as i,re as w};
